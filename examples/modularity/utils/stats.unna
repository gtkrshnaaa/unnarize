// Statistics utilities module
// Demonstrates chained imports by using geometry module
import geometry as gm;

function calculateMean(numbers) {
    var sum = 0;
    var count = 0;
    var current = "";
    var i = 0;
    
    while (i < numbers.length) {
        if (numbers[i] == ',') {
            var num = parseNumber(current);
            sum = sum + num;
            count = count + 1;
            current = "";
        } else {
            current = current + numbers[i];
        }
        i = i + 1;
    }
    
    if (current != "") {
        var num = parseNumber(current);
        sum = sum + num;
        count = count + 1;
    }
    
    return sum / count;
}

// Chained usage with geometry: build a joint summary
function describeDataWithCircle(numbers, radius) {
    var mean = calculateMean(numbers);
    var variance = calculateVariance(numbers);
    var circle = gm.circleReport(radius);
    return "[Stats] mean=" + mean + ", var=" + variance + "\n" + circle;
}

// Ring area using geometry (outer minus inner)
function ringArea(outerRadius, innerRadius) {
    var outer = gm.calculateArea(outerRadius);
    var inner = gm.calculateArea(innerRadius);
    return outer - inner;
}

// Area computed from diameter (calls geometry internally)
function areaFromDiameter(diameter) {
    var r = diameter / 2;
    return gm.calculateArea(r);
}

function calculateVariance(numbers) {
    var mean = calculateMean(numbers);
    var sumSquares = 0;
    var count = 0;
    var current = "";
    var i = 0;
    
    while (i < numbers.length) {
        if (numbers[i] == ',') {
            var num = parseNumber(current);
            var diff = num - mean;
            sumSquares = sumSquares + (diff * diff);
            count = count + 1;
            current = "";
        } else {
            current = current + numbers[i];
        }
        i = i + 1;
    }
    
    if (current != "") {
        var num = parseNumber(current);
        var diff = num - mean;
        sumSquares = sumSquares + (diff * diff);
        count = count + 1;
    }
    
    return sumSquares / count;
}

function parseNumber(str) {
    var result = 0;
    var i = 0;
    while (i < str.length) {
        result = result * 10 + (str[i] - '0');
        i = i + 1;
    }
    return result;
}